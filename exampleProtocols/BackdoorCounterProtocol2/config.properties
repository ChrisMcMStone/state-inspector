# Memory analysis tooling
base_path = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/
ptrace_path = ptrace-statemem/statemem/statemem
log_interface_path = logger/logger.py
difftool_path = diff_tool/diff_tool.py
tainter_path = statemem-taint/src/depan.py

# Snapshot and log ouput directory 
output_dir = /tmp/example_protocol

# Target binary options
#bin_path = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/exampleProtocols/BasicProtocol/protocolBasic
bin_path = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/exampleProtocols/BackdoorCounterProtocol2/protocolBasic
#extra_binaries = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/gnutls/src/gnutls-3.3.8/lib/.libs/libgnutls.so.28.41.0

# Target learner options

# app_name depends on -app parameter of ptrace-statemem
# TODO CHANGE APP-NAME when supported has been implemented for ptrace
app_name = protocolBasic
type = socket
host = localhost
port = 9000
alphabet = INIT AUTH DATA CLOSE


# For time sensitive protocols with external test harnesses, inputs sequences that form a query can be concatenated
# This avoids having the learner manage the stepping over each input of the query, sending it to the harness as a whole instead.
# NEEDS EXPLICIT SUPPORT FROM HARNESS, default = false
combine_query = false
# Write the timestamped I/O log with the test harness. This is implicit if combine_query is used. By default is false.
harness_side_logging = true

# Supported bootstrap modes = HAPPYFLOW, HAPPYFLOWMUTATED
# HAPPYFLOW, run only the specified bootstrap_flows
# HAPPYFLOWMUTATED, will hueristically mutate specified bootstrap_flows in attempts to capture more state memory
bootstrap_mode=HAPPYFLOWMUTATED

# Initiate learner with the following queries for identifying state memory
bootstrap_flows= [{INIT:ACK} {AUTH:ACK} {DATA:ACK} {CLOSE:ConnClosed}]
disable_outputs=ConnClosed
# Render the model each time a new state is discovered
inc_model_drawing = true
model_cleaner = statelearner/model_cleaner.py

empty_outputs=Empty

# Taint analysis 
enable_taint_analysis=true
ida_path = C:\\Program Files\\IDA 7.0\\ida64.exe
max_watch_hits_per_addr = 2

# If a taint test determines memory is not state memory
# We can save the context, and automatically ignore this memory in future queries if the memory context conditions are met
negative_conditional_memory = false

extra_taint_check = false
time_bound = 10

ptrace_attach_delay = 500

# This setting specifies the depth to which we check i/o equivalence of two states before attempting to merge them
# If above enable_taint_analysis is turned off, we merge i/o equivalent states irrespective of their memory differences (as long the state to merge, is reachable from the merge target)
# If taint analysis is enabled, the merge decision will be based on the results of taint analysis on the memory differences between I/O equivalent states.
# default depth = 1
io_equivalence_merge_depth = 1

# For each watchpoint hit, use print the corresponding source code if available
# Additionally, f taint analysis is disabled, we can still enable watchpoint detection of differing memory in merged states
# this allows us to manually analyse the source code details (using 'addr2line') of memory that would have been taint tested.
print_watchpoint_hit_source_info = true
# Number of printed source code lines either side of the watchpoint hit
watchpoint_source_code_print_range = 5

# python3 is required, use pypy for more better performance
python_cmd = pypy3

#### Optional ability to launch target from learner, this allows for target restarting in case errors occur. 

# shell command prepended to target launch commands in order to disable aslr
#aslr_disabler = setarch x86_64 -R

# Square bracket enclosed list of launch commands - usually this will be one command.
# additional cmds can be added so bootstrap flows operate over many instances (with possibly different parameters to improve state mem output)
# e.g. with openssl, we launch the server in different instances with a different certificate each time
#target_launch_cmds = [/home/chris/openssl/src/openssl-b2d951e/apps/openssl s_server -key /home/chris/openssl/statelearner/examples/openssl/key1/diagserverCA.key -cert /home/chris/openssl/statelearner/examples/openssl/key1/diagserverCA.pem -CAfile /home/chris/openssl/statelearner/examples/openssl/key1/diagserverCA.pem -accept 4500 -www]
# [/home/chris/openssl/src/openssl-b2d951e/apps/openssl s_server -key /home/chris/openssl/statelearner/examples/openssl/key2/diagserverCA.key -cert /home/chris/openssl/statelearner/examples/openssl/key2/diagserverCA.pem -CAfile /home/chris/openssl/statelearner/examples/openssl/key2/diagserverCA.pem -accept 4500 -www]
