# Memory analysis tooling
base_path = /home/mathy/greyboxstatelearning
ptrace_path = ptrace-statemem/statemem/statemem
log_interface_path = logger/logger.py
difftool_path = diff_tool/diff_tool.py
tainter_path = statemem-taint/src/depan.py

# Snapshot and log ouput directory 
output_dir = /tmp/iwd

# Target binary options
bin_path = /home/mathy/greyboxstatelearning/iwd/iwd/src/iwd

# Target learner options
# app_name depends on -app parameter of ptrace-statemem
app_name = iwd
type = socket
hostname = localhost
port = 4444
#alphabet = AUTH ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|RC=+1|) ENC_DATA
alphabet = DELAY ASSOC(RSNE=tc) ASSOC(RSNE=tt) ASSOC(RSNE=ct) ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) E4 DATA E2 ENC_DATA E2(|KD=WPA1|RSNE=tt|CS=MD5|) E2(|KD=WPA2|RSNE=tt|CS=MD5|) E2(|MIC=F|) E2(|RC=>|) E4(|MIC=F|) E4(|KD=WPA1|RSNE=tt|CS=MD5|) E4(|NONC=W|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=Pxxx|)
#alphabet = DELAY ASSOC(RSNE=tc) ASSOC(RSNE=tt) ASSOC(RSNE=ct) ASSOC(RSNE=cc) E2(|KD=WPA2|RSNE=cc|CS=SHA1|) E4(|KD=WPA2|CS=SHA1|) E4 DATA E2 ENC_DATA E2(|KD=WPA1|RSNE=tt|CS=MD5|) E2(|KD=WPA2|RSNE=tt|CS=MD5|) E2(|MIC=F|) E2(|RC=>|) E4(|MIC=F|) E4(|KD=WPA1|RSNE=tt|CS=MD5|) E2(|KD=WPA1|RSNE=cc|CS=SHA1|) E2(|KD=RAND|RSNE=cc|CS=SHA1|) E2(|KD=WPA2|RSNE=tc|CS=SHA1|) E2(|KD=WPA2|RSNE=ct|CS=MD5|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=PMSx|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=PMSE|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=Pxxx|) E2(|KD=WPA2|RSNE=cc|CS=SHA1|KF=xxxx|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=PMSE|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=xxxx|) E2(|KD=WPA2|RSNE=ct|CS=MD5|KF=xxSE|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=PMSE|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=xxxx|) E2(|KD=WPA2|RSNE=tt|CS=MD5|KF=xxSE|) E2(|MIC=F|CS=SHA1|KF=Pxxx|) E2(|MIC=F|CS=SHA1|KF=PMSE|) E4(|RC=>|) E4(|NONC=W|) E4(|KD=WPA1|CS=MD5|) E4(|KD=WPA1|CS=MD5|KF=PMxx|) E4(|KD=WPA2|CS=MD5|) E4(|KD=WPA2|CS=SHA1|KF=PMSx|) E4(|KD=WPA2|CS=SHA1|KF=PMSE|) E4(|KD=WPA2|CS=SHA1|KF=Pxxx|) E4(|KD=WPA2|CS=SHA1|KF=xxxx|) E4(|KD=WPA2|CS=MD5|KF=PMSE|) E4(|KD=WPA2|CS=MD5|KF=xxxx|) E4(|KD=WPA2|CS=MD5|KF=xxSE|)

# Supported bootstrap modes = HAPPYFLOW, HAPPYFLOWMUTATED
# HAPPYFLOW, run only the specified bootstrap_flows
# HAPPYFLOWMUTATED, will hueristically mutate specified bootstrap_flows in attempts to capture more state memory
bootstrap_mode=HAPPYFLOWMUTATED
disable_outputs=DEAUTH REJECT
empty_outputs=TIMEOUT
# Render the model each time a new state is discovered
inc_model_drawing = true
model_cleaner = statelearner/model_cleaner.py

# Taint analysis 
enable_taint_analysis=true
ida_path = C:\\Program Files\\IDA 7.0\\ida64.exe
max_watch_hits_per_addr = 2
tainter_insn_window = 512

negative_conditional_memory = false

extra_taint_check = true
time_bound=60
memory_init_alternate = false

ptrace_attach_delay=200

# For time sensitive protocols with external test harnesses, inputs sequences that form a query can be concatenated
# This avoids having the learner manage the stepping over each input of the query, sending it to the harness as a whole instead.
# NEEDS EXPLICIT SUPPORT FROM HARNESS, default = false
combine_query = false
# Write the timestamped I/O log with the test harness. This is implicit if combine_query is used. By default is false.
harness_side_logging = true

# Initiate learner with the following queries for identifying state memory
# format (e.g. two flows): [{input1}{input2}] [{input1}{input2}] 
# optionally specify outputs for each input like {input1:output1} to verify they are as expected
bootstrap_flows= [{AUTH} {ASSOC(RSNE=cc)}  {E2(|KD=WPA2|RSNE=cc|CS=SHA1|)} {E4(|KD=WPA2|CS=SHA1|)}]
#bootstrap_flows= [{AUTH} {ASSOC(RSNE=cc):E1(KD=WPA2|CS=SHA1)}  {E2(|KD=WPA2|RSNE=cc|CS=SHA1|) : E3(KD=WPA2|CS=SHA1)} {E4(|KD=WPA2|CS=SHA1|) : TIMEOUT}]
disable_outputs=Deauth TIMEOUT
empty_outputs=Empty
# Render the model each time a new state is discovered
inc_model_drawing = true
model_cleaner = statelearner/model_cleaner.py

# Taint analysis 
enable_taint_analysis=false
ida_path = C:\\Program Files\\IDA 7.2\\ida64.exe
max_watch_hits_per_addr = 2

# This setting specifies the depth to which we check i/o equivalence of two states before attempting to merge them
# If above enable_taint_analysis is turned off, we merge i/o equivalent states irrespective of their memory differences (as long the state to merge, is reachable from the merge target)
# If taint analysis is enabled, the merge decision will be based on the results of taint analysis on the memory differences between I/O equivalent states.
# default depth = 1
io_equivalence_merge_depth = 1

# For each watchpoint hit, use print the corresponding source code if available
# Additionally, f taint analysis is disabled, we can still enable watchpoint detection of differing memory in merged states
# this allows us to manually analyse the source code details (using 'addr2line') of memory that would have been taint tested.
print_watchpoint_hit_source_info = true
# Number of printed source code lines either side of the watchpoint hit
watchpoint_source_code_print_range = 5

# python3 is required, use pypy for more better performance
python_cmd = pypy3
