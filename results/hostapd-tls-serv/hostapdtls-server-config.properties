# Memory analysis tooling
base_path = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/
ptrace_path = ptrace-statemem/statemem/statemem
log_interface_path = logger/logger.py
difftool_path = diff_tool/diff_tool.py
tainter_path = statemem-taint/src/depan.py

# Snapshot and log ouput directory 
output_dir = /tmp/hostap_tls
# This saves disk space if learner requires lots of queries
delete_snapshots_after_use = false

# Target binary options
bin_path = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/hostapd-tls/hostap/tests/hostaptls_srv

# Target learner options
# app_name depends on -app parameter of ptrace-statemem
app_name = hostaptls_srv
type = tls
target = server
# Handling ClientHelloDHE* takes a long time, so this long timeout is needed
timeout = 2000
host = localhost
port = 4500
keystore_filename = /home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/openssl/server_key/keystore
keystore_password = 123456

alphabet = ClientHelloRSAReset EmptyCertificate ClientKeyExchange ChangeCipherSpec Finished ApplicationData ApplicationDataEmpty
#alphabet = ClientHello ClientHelloDHE ClientHelloRSA ClientHelloDHEReset ClientHelloRSAReset ServerHelloRSA ServerHelloDHE EmptyCertificate CertificateRequest ServerHelloDone ClientCertificate ClientCertificateVerify ClientKeyExchange ChangeCipherSpec Finished ApplicationData ApplicationDataEmpty HeartbeatRequest HeartbeatResponse Alert10 Alert1100 ServerCertificate ServerKeyExchange

# Supported bootstrap modes = HAPPYFLOW, HAPPYFLOWMUTATED
# HAPPYFLOW, run only the specified bootstrap_flows
# HAPPYFLOWMUTATED, will hueristically mutate specified bootstrap_flows in attempts to capture more state memory
bootstrap_mode=HAPPYFLOWMUTATED

# Initiate learner with the following queries for identifying state memory
# format (e.g. two flows): [{input1}{input2}] [{input1}{input2}] 
# optionally specify outputs for each input like {input1:output1} to verify they are as expected
bootstrap_flows= [{ClientHelloRSAReset:ServerHelloTLSv12CertificateServerHelloDone} {ClientKeyExchange:Empty} {ChangeCipherSpec:Empty} {Finished:ChangeCipherSpecFinished} ]
disable_outputs=ConnectionClosed DecryptError
empty_outputs=Empty
# Render the model each time a new state is discovered
inc_model_drawing = true
model_cleaner = statelearner/model_cleaner.py

# Taint analysis 
enable_taint_analysis=true
ida_path = C:\\Program Files\\IDA 7.0\\ida64.exe
max_watch_hits_per_addr = 2

# If a taint test determines memory is not state memory
# We can save the context, and automatically ignore this memory in future queries if the memory context conditions are met
negative_conditional_memory = false


extra_taint_check = true
time_bound=120
memory_init_alternate = false

ptrace_attach_delay=500

# This setting specifies the depth to which we check i/o equivalence of two states before attempting to merge them
# If above enable_taint_analysis is turned off, we merge i/o equivalent states irrespective of their memory differences (as long the state to merge, is reachable from the merge target)
# If taint analysis is enabled, the merge decision will be based on the results of taint analysis on the memory differences between I/O equivalent states.
# default depth = 1
io_equivalence_merge_depth = 1

# For each watchpoint hit, use print the corresponding source code if available
# Additionally, f taint analysis is disabled, we can still enable watchpoint detection of differing memory in merged states
# this allows us to manually analyse the source code details (using 'addr2line') of memory that would have been taint tested.
print_watchpoint_hit_source_info = true
# Number of printed source code lines either side of the watchpoint hit
watchpoint_source_code_print_range = 5

# python3 is required, use pypy for more better performance
python_cmd = pypy3

#### Optional ability to launch target from learner, this allows for target restarting in case errors occur. 

# shell command prepended to target launch commands in order to disable aslr

aslr_disabler = setarch x86_64 -R

# Square bracket enclosed list of launch commands - usually this will be one command.
# additional cmds can be added so bootstrap flows operate over many instances (with possibly different parameters to improve state mem output)
# e.g. with openssl, we launch the server in different instances with a different certificate each time
#target_launch_cmds = [/home/chris/Documents/phd/hw_symb/grey_box/greyboxstatelearning/hostapd-tls/hostap/tests/hostaptls_srv 4500]
