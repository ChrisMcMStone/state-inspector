# Memory analysis tooling
base_path = /home/james/Documents/CTF/project/greyboxstatelearning/
ptrace_path = ptrace-statemem/statemem/statemem
log_interface_path = logger/logger.py
difftool_path = diff_tool/diff_tool.py
tainter_path = statemem-taint/src/depan.py

# Snapshot and log ouput directory 
# This saves disk space if learner requires lots of queries
delete_snapshots_after_use = true
output_dir=/tmp/openssl


# Target binary options
bin_path = /home/james/Documents/CTF/project/tls/openssl/openssl_1_1_1h/apps/openssl
extra_binaries = ""

# Target learner options
# app_name depends on -app parameter of ptrace-statemem
app_name = openssl
type = socket
target = server
timeout = 400
host = localhost
port = 6666
keystore_filename = /home/james/Documents/CTF/project/greyboxstatelearning/openssl/server_key/keystore
keystore_password = 123456

alphabet = ClientHelloRSAReset ClientKeyExchange EmptyCertificate ChangeCipherSpec Finished ApplicationData ApplicationDataEmpty ClientCertificateValid ClientCertificateInvalid ClientCertificateVerify CertificateRequest HelloVerifyRequest DHClientKeyExchange DHEServerKeyExchange ECDHClientKeyExchange ECDHEServerKeyExchange ServerHelloDone Alert SSL2ClientHello HelloRequest EncryptedExtensionMessage ServerHello ClientCertificateVerifyInvalid

# Supported bootstrap modes = HAPPYFLOW, HAPPYFLOWMUTATED
# HAPPYFLOW, run only the specified bootstrap_flows
# HAPPYFLOWMUTATED, will hueristically mutate specified bootstrap_flows in attempts to capture more state memory
bootstrap_mode=HAPPYFLOWMUTATED
mutated_bootstrap_per_input_max_repeat=1

# Initiate learner with the following queries for identifying state memory
# format (e.g. two flows): [{input1}{input2}] [{input1}{input2}] 
# optionally specify outputs for each input like {input1:output1} to verify they are as expected

# ORIGINAL:      {ClientHelloRSAReset:ServerHelloTLSv12CertificateServerHelloDone} {ClientKeyExchange:Empty} {ChangeCipherSpec:Empty} {Finished:ChangeCipherSpecFinished} {ApplicationData:ApplicationDataConnectionClosed}
bootstrap_flows= [{ClientHelloRSAReset:SERVER_HELLOCERTIFICATECERTIFICATE_REQUESTSERVER_HELLO_DONE} {ClientCertificateValid:Empty} {ClientKeyExchange:Empty} {ClientCertificateVerify:Empty} {ChangeCipherSpec:Empty} {Finished:CHANGE_CIPHER_SPECFINISHED} {ApplicationData:APPLICATIONConnectionClosed}]
#ServerHelloTLSv12CertificateServerHelloDone Empty Empty ChangeCipherSpecFinished APPLICATIONConnectionClosed
disable_outputs=ConnectionClosed DecryptError
empty_outputs=Empty
# Render the model each time a new state is discovered
inc_model_drawing = true
model_cleaner = statelearner/model_cleaner.py

# Taint analysis 
enable_taint_analysis=false
ida_path = /home/james/Documents/CTF/project/ida/ida64
max_watch_hits_per_addr = 2
tainter_insn_window = 512

# If a taint test determines memory is not state memory
# We can save the context, and automatically ignore this memory in future queries if the memory context conditions are met
negative_conditional_memory = false

extra_taint_check = false
exploration_bound = 3

# This setting specifies the depth to which we check i/o equivalence of two states before attempting to merge them
# If above enable_taint_analysis is turned off, we merge i/o equivalent states irrespective of their memory differences (as long the state to merge, is reachable from the merge target)
# If taint analysis is enabled, the merge decision will be based on the results of taint analysis on the memory differences between I/O equivalent states.
# default depth = 1
io_equivalence_merge_depth = 1

# For each watchpoint hit, use print the corresponding source code if available
# Additionally, f taint analysis is disabled, we can still enable watchpoint detection of differing memory in merged states
# this allows us to manually analyse the source code details (using 'addr2line') of memory that would have been taint tested.
print_watchpoint_hit_source_info = true
# Number of printed source code lines either side of the watchpoint hit
watchpoint_source_code_print_range = 5

# python3 is required, use pypy for more better performance
python_cmd = pypy3

aslr_disabler = setarch x86_64 -R
target_launch_cmds = [/home/james/Documents/CTF/project/tls/openssl/openssl_1_1_1h/apps/openssl s_server -key /home/james/Documents/CTF/project/tls/openssl/server_key/server_1.key -cert /home/james/Documents/CTF/project/tls/openssl/server_key/server_1.pem -CAfile /home/james/Documents/CTF/project/tls/openssl/server_key/CA.pem -accept 4500 -www -Verify 2 -verify_return_error]